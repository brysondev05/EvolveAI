require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require File.join(File.dirname(`node --print "require.resolve('@react-native-community/cli-platform-ios/package.json')"`), "native_modules")

platform :ios, '14.1'

require 'json'
podfile_properties = JSON.parse(File.read('./Podfile.properties.json')) rescue {}

# these packages are not compatible with use_frameworks! out of the box
$static_frameworks = [
  'react-native-mmkv',
  'react-native-shimmer',
  'RNReanimated',
  'RNPermissions',
  'Permission-AppTrackingTransparency',
  'Permission-Notifications',
  'Permission-StoreKit'
]

$RNFirebaseAsStaticFramework = true

target 'JuggernautAI' do
  use_frameworks!
  #use_modular_headers!
  use_expo_modules!

  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end

  config = use_native_modules!

  # react-native-permissions handlers
  # https://github.com/zoontek/react-native-permissions#ios
  permissions_path = '../node_modules/react-native-permissions/ios'

  pod 'Permission-AppTrackingTransparency', :path => "#{permissions_path}/AppTrackingTransparency"
  pod 'Permission-Notifications', :path => "#{permissions_path}/Notifications"
  pod 'Permission-StoreKit', :path => "#{permissions_path}/StoreKit"
  pod 'Permission-Camera', :path => "#{permissions_path}/Camera"
  
#  pod 'react-native-camera', path: '../node_modules/react-native-camera', subspecs: [
#    'BarcodeDetectorMLKit'
#  ]

  use_react_native!(
    :path => config["reactNativePath"],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == 'hermes'
  )

  # workaround for packages that are not compatible with use_frameworks!
  # https://github.com/zoontek/react-native-permissions#workaround-for-use_frameworks-issues
  pre_install do |installer|
    Pod::Installer::Xcode::TargetValidator.send(:define_method, :verify_no_static_framework_transitive_dependencies) {}

    installer.pod_targets.each do |pod|
      if $static_frameworks.include?(pod.name)
        def pod.build_type;
          Pod::BuildType.static_library
        end
      end
    end
  end

 
  post_install do |installer|
#    flipper_post_install(installer)

  installer.generated_projects.each do |project|
    project.targets.each do |target|
        target.build_configurations.each do |config|
            config.build_settings["DEVELOPMENT_TEAM"] = "Your Team ID"
         end
    end
  end

    react_native_post_install(installer)
    `sed -i -e  $'s/__IPHONE_10_0/__IPHONE_12_0/' Pods/RCT-Folly/folly/portability/Time.h`
    installer.pods_project.targets.each do |target|
      if target.respond_to?(:product_type) and target.product_type == "com.apple.product-type.bundle"
        target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end

      target.build_configurations.each do |config|
        config.build_settings["ONLY_ACTIVE_ARCH"] = "YES"
        config.build_settings["EXCLUDED_ARCHS[sdk=*]"] = "armv7"
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
        config.build_settings['ENABLE_BITCODE'] = 'NO'
      end

      case target.name
          when 'RCT-Folly'
            target.build_configurations.each do |config|
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '9.0'
        end
      end
    end
end
end
